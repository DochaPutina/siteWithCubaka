/*
 * This file is generated by jOOQ.
 */
package com.tej.JooQDemo.jooq.sample.model.tables;


import com.tej.JooQDemo.jooq.sample.model.ChubakaSite;
import com.tej.JooQDemo.jooq.sample.model.Indexes;
import com.tej.JooQDemo.jooq.sample.model.Keys;
import com.tej.JooQDemo.jooq.sample.model.tables.records.OrdersRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Orders extends TableImpl<OrdersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>chubaka_site.orders</code>
     */
    public static final Orders ORDERS = new Orders();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrdersRecord> getRecordType() {
        return OrdersRecord.class;
    }

    /**
     * The column <code>chubaka_site.orders.clientId</code>.
     */
    public final TableField<OrdersRecord, Integer> CLIENTID = createField(DSL.name("clientId"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>chubaka_site.orders.statusPayment</code>.
     */
    public final TableField<OrdersRecord, Byte> STATUSPAYMENT = createField(DSL.name("statusPayment"), SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>chubaka_site.orders.productsId</code>.
     */
    public final TableField<OrdersRecord, Integer> PRODUCTSID = createField(DSL.name("productsId"), SQLDataType.INTEGER.nullable(false), this, "");

    private Orders(Name alias, Table<OrdersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Orders(Name alias, Table<OrdersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>chubaka_site.orders</code> table reference
     */
    public Orders(String alias) {
        this(DSL.name(alias), ORDERS);
    }

    /**
     * Create an aliased <code>chubaka_site.orders</code> table reference
     */
    public Orders(Name alias) {
        this(alias, ORDERS);
    }

    /**
     * Create a <code>chubaka_site.orders</code> table reference
     */
    public Orders() {
        this(DSL.name("orders"), null);
    }

    public <O extends Record> Orders(Table<O> child, ForeignKey<O, OrdersRecord> key) {
        super(child, key, ORDERS);
    }

    @Override
    public Schema getSchema() {
        return ChubakaSite.CHUBAKA_SITE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ORDERS_ORDERS_FK0_IDX);
    }

    @Override
    public UniqueKey<OrdersRecord> getPrimaryKey() {
        return Keys.KEY_ORDERS_PRIMARY;
    }

    @Override
    public List<UniqueKey<OrdersRecord>> getKeys() {
        return Arrays.<UniqueKey<OrdersRecord>>asList(Keys.KEY_ORDERS_PRIMARY);
    }

    @Override
    public List<ForeignKey<OrdersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<OrdersRecord, ?>>asList(Keys.ORDERS_FK0);
    }

    private transient Product _product;

    public Product product() {
        if (_product == null)
            _product = new Product(this, Keys.ORDERS_FK0);

        return _product;
    }

    @Override
    public Orders as(String alias) {
        return new Orders(DSL.name(alias), this);
    }

    @Override
    public Orders as(Name alias) {
        return new Orders(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Orders rename(String name) {
        return new Orders(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Orders rename(Name name) {
        return new Orders(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Byte, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
