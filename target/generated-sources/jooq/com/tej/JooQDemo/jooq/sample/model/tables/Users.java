/*
 * This file is generated by jOOQ.
 */
package com.tej.JooQDemo.jooq.sample.model.tables;


import com.tej.JooQDemo.jooq.sample.model.ChubakaSite;
import com.tej.JooQDemo.jooq.sample.model.Indexes;
import com.tej.JooQDemo.jooq.sample.model.Keys;
import com.tej.JooQDemo.jooq.sample.model.tables.records.UsersRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Users extends TableImpl<UsersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>chubaka_site.users</code>
     */
    public static final Users USERS = new Users();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsersRecord> getRecordType() {
        return UsersRecord.class;
    }

    /**
     * The column <code>chubaka_site.users.id</code>.
     */
    public final TableField<UsersRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>chubaka_site.users.userName</code>.
     */
    public final TableField<UsersRecord, String> USERNAME = createField(DSL.name("userName"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>chubaka_site.users.password</code>.
     */
    public final TableField<UsersRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>chubaka_site.users.money</code>.
     */
    public final TableField<UsersRecord, Integer> MONEY = createField(DSL.name("money"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>chubaka_site.users.email</code>.
     */
    public final TableField<UsersRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>chubaka_site.users.number</code>.
     */
    public final TableField<UsersRecord, String> NUMBER = createField(DSL.name("number"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>chubaka_site.users.statusId</code>.
     */
    public final TableField<UsersRecord, Integer> STATUSID = createField(DSL.name("statusId"), SQLDataType.INTEGER.nullable(false), this, "");

    private Users(Name alias, Table<UsersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Users(Name alias, Table<UsersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>chubaka_site.users</code> table reference
     */
    public Users(String alias) {
        this(DSL.name(alias), USERS);
    }

    /**
     * Create an aliased <code>chubaka_site.users</code> table reference
     */
    public Users(Name alias) {
        this(alias, USERS);
    }

    /**
     * Create a <code>chubaka_site.users</code> table reference
     */
    public Users() {
        this(DSL.name("users"), null);
    }

    public <O extends Record> Users(Table<O> child, ForeignKey<O, UsersRecord> key) {
        super(child, key, USERS);
    }

    @Override
    public Schema getSchema() {
        return ChubakaSite.CHUBAKA_SITE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USERS_KEY_US_TO_ORD_IDX, Indexes.USERS_USER_FK1_IDX, Indexes.USERS_USER_FK2_IDX, Indexes.USERS_USERS_FK0, Indexes.USERS_USERS_FK0_IDX);
    }

    @Override
    public UniqueKey<UsersRecord> getPrimaryKey() {
        return Keys.KEY_USERS_PRIMARY;
    }

    @Override
    public List<UniqueKey<UsersRecord>> getKeys() {
        return Arrays.<UniqueKey<UsersRecord>>asList(Keys.KEY_USERS_PRIMARY);
    }

    @Override
    public List<ForeignKey<UsersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UsersRecord, ?>>asList(Keys.USER_FK0, Keys.USER_FK2);
    }

    private transient Orders _orders;
    private transient Status _status;

    public Orders orders() {
        if (_orders == null)
            _orders = new Orders(this, Keys.USER_FK0);

        return _orders;
    }

    public Status status() {
        if (_status == null)
            _status = new Status(this, Keys.USER_FK2);

        return _status;
    }

    @Override
    public Users as(String alias) {
        return new Users(DSL.name(alias), this);
    }

    @Override
    public Users as(Name alias) {
        return new Users(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Users rename(String name) {
        return new Users(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Users rename(Name name) {
        return new Users(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, String, Integer, String, String, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
